{"name":"Procmon","tagline":"Procmon alternative for Linux","body":"Procmon\r\n=======\r\n\r\n[![Build Status](https://drone.io/github.com/alexandernst/procmon/status.png)](https://drone.io/github.com/alexandernst/procmon/latest)\r\n\r\nProcmon alternative for Linux\r\n\r\n\r\nThis is a kernel module that hijacks sys_calls and printfs messages whenever a sys_call is called.\r\nIn the future, instead of printfs-ing messages, some kind of events will be sent to an UI which will\r\nbe similar to what Procmon (for Windows) offers right now.\r\n\r\nKeep in mind that this is a WIP and you can end up with a totally frozen kernel!\r\n\r\n\r\nIn order to build this module you'll need some basic stuff (make, gcc) and the headers of the kernel \r\nyou're running on.\r\nOnce you have all those you just need to run ```make``` inside the root folder.\r\n\r\nLoading the module isn't any different from loading any other module. ```insmod procmon.ko``` for \r\nloading it and ```rmmod procmon.ko``` for unloading it.\r\n\r\nTo start the actual hijack process, once loaded the module, run ```sysctl procmon.state=1```.\r\nOnce started, you'll probably want to run ```./procmon-viewer``` to see an actual output.\r\n\r\nTo stop it just run hit ```Ctrl + C```. To stop the module run ```sysctl procmon.state=0```.\r\n\r\nKeep in mind that the module will protect your kernel while unloading. That means that if any process\r\n(both in userland and in the kernel itself) expect to call one of the hijacked syscalls, the module will\r\nwait those processes to run what they need to run. This may take from 1ms to days. If there's a really long\r\ndelay, try killing/restarting some processes that may have scheduled a call. For example, the module won't\r\nunload until you press ```Enter``` on all consoles that had any activity while the module was loaded.\r\n\r\nThe UI part will be based on ```rbcurses``` (may change). You'll need Ruby 1.9.3 or newer to play with this part.\r\nNote that this is experimental and has absolutely no support at the moment. Basic instructions:\r\nFirst you need to build the Ruby C extension that will allow playing with ```kmod``` from Ruby. Go to the\r\n```procmon/ui``` and run ```ruby extconf.rb``` and then ```make```. If everything went fine you'll be able to\r\ncopy the binary to the root directory and run ```ruby procmon.rb```.\r\nAnyways, at this moment that will cause a few bugs, maybe a crash. It *won't* show anything useful.\r\n\r\n![Screenshot](https://raw.github.com/alexandernst/procmon/screenshots/screenshot1.jpeg)\r\n\r\nWhy Procmon\r\n=======\r\n\r\nI'm completely aware of ```kprobes```, ```perf``` and all other kernel debug systems/methods. Probably all of them work better than Procmon, but they have one disadvantage: they require you to recompile the kernel or they are not enabled by default in some distros.\r\n\r\nYet another reason: I have fun doing it! I don't seek for this project to be merged into mainline nor being used by every Linux user out there. I'm doing it for myself. Anyways, I'd be glad if it works for you too :)\r\n\r\nOn the other hand, Procmon will ```just work```.\r\nWhat this module does to ```just work``` is hijack/replace all (relevant/interesting) syscalls from the syscall table. While this is risky, it will allow you to have a similar tool to Procmon for Windows, without having to recompile the kernel.\r\n\r\nContributing\r\n=======\r\n\r\nJust send me patches, if they are ok I'll give you push access :)\r\n\r\nAbout the editing, note that I'm using ```TAB```s with 4 spaces width, so please keep it that way.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}