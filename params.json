{"name":"Procmon","tagline":"Procmon alternative for Linux","body":"Procmon\r\n=======\r\n\r\n[![Build Status](https://drone.io/github.com/alexandernst/procmon/status.png)](https://drone.io/github.com/alexandernst/procmon/latest)\r\n\r\nProcmon alternative for Linux - [Main webpage](http://alexandernst.github.io/procmon \"Procmon's Homepage\")\r\n\r\n\r\nThis is a kernel module that hijacks sys_calls and printfs messages whenever a \r\nsys_call is called. In the future, instead of printfs-ing messages, some kind \r\nof events will be sent to an UI which will be similar to what Procmon (for \r\nWindows) offers right now.\r\n\r\nKeep in mind that this is a WIP and you can end up with a totally frozen \r\nkernel!\r\n\r\n\r\nIn order to build this module you'll need some basic stuff (make, gcc) and the \r\nheaders of the kernel you're running on. Once you have all those you just need\r\nto run ```make``` inside the root folder.\r\n\r\nLoading the module isn't any different from loading any other module. \r\n```insmod procmon.ko``` for loading it and ```rmmod procmon.ko``` for \r\nunloading it.\r\n\r\nTo start the actual hijack process, once loaded the module, run \r\n```sysctl procmon.state=1```. Once started, you'll probably want to run \r\n```./procmon-viewer``` to see an actual output.\r\n\r\nTo stop it just run hit ```Ctrl + C```. To stop the module run \r\n```sysctl procmon.state=0```.\r\n\r\nKeep in mind that the module will protect your kernel while unloading. That \r\nmeans that if any process (both in userland and in the kernel itself) expect \r\nto call one of the hijacked syscalls, the module will wait those processes to \r\nrun what they need to run. This may take from 1ms to days. If there's a really \r\nlong delay, try killing/restarting some processes that may have scheduled a \r\ncall. For example, the module won't unload until you press ```Enter``` on all \r\nconsoles that had any activity while the module was loaded.\r\n\r\nThe UI part will be based on ```rbcurses``` (may change). You'll need Ruby \r\n1.9.3 or newer and Ruby-dev to play with this part. Note that this is \r\nexperimental and has absolutely no support at the moment. Basic instructions:\r\n\r\nFirst you need to build the Ruby C extension that will allow playing with \r\n```kmod``` from Ruby. Go to the ```procmon/ui``` and run ```ruby extconf.rb``` \r\nand then ```make```. If everything went fine you'll be able to run \r\n```sudo ruby procmon.rb``` in the root directory.\r\n\r\n![Screenshot](https://raw.github.com/alexandernst/procmon/screenshots/screenshot1.jpeg)\r\n\r\nWhy Procmon\r\n=======\r\n\r\nI'm completely aware of ```kprobes```, ```perf``` and all other kernel debug \r\nsystems/methods. Probably all of them work better than Procmon, but they have \r\none disadvantage: they require you to recompile the kernel or they are not \r\nenabled by default in some distros.\r\n\r\nYet another reason: I have fun doing it! I don't seek for this project to be \r\nmerged into mainline nor being used by every Linux user out there. I'm doing \r\nit for myself. Anyways, I'd be glad if it works for you too :)\r\n\r\nOn the other hand, Procmon will ```just work```.\r\nWhat this module does to ```just work``` is hijack/replace all \r\n(relevant/interesting) syscalls from the syscall table. While this is risky, \r\nit will allow you to have a similar tool to Procmon for Windows, without having\r\nto recompile the kernel.\r\n\r\nContributing\r\n=======\r\n\r\nJust send me patches, if they are ok I'll give you push access :)\r\n\r\nAbout the editing, note that I'm using ```TAB```s with 4 spaces width, so \r\nplease keep it that way.","google":"UA-27952342-2","note":"Don't delete this file! It's used internally to help with page regeneration."}